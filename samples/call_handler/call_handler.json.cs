// generated by NiceStateMachineGenerator v1.0.0.0

using System;
using System.Threading.Tasks;

namespace Generated
{
    public partial class call_handler: IDisposable
    {
        
        public delegate void TimerFiredCallback(ITimer timer);
        
        public interface ITimer: IDisposable
        {
            void StartOrReset(double timerDelaySeconds);
            void Stop();
        }
        
        public delegate ITimer CreateTimerDelegate(string timerName, TimerFiredCallback callback);
        
        
        public enum State
        {
            in_call,
            session_termination_process,
            awaiting_asr_fully_finalized,
            asr_fully_finalized,
            early_termination,
            termination,
        }
        
        /**<summary>sipCall.Stop()</summary>*/
        public event Action OnStateEnter__session_termination_process;
        /**<summary>asr.SendFinalized()</summary>*/
        public event Action OnStateEnter__awaiting_asr_fully_finalized;
        /**<summary>stateMachine.OnExternalEvent(DialogTerminated)</summary>*/
        public event Action OnStateEnter__asr_fully_finalized;
        /**<summary>warn</summary>*/
        public event Action OnStateEnter__early_termination;
        /**<summary>productionPlugin.WriteSessionToDb</summary>*/
        public event Action OnStateEnter__termination;
        
        
        private bool m_isDisposed = false;
        public event Action<string> OnLog;
        public event Action<State> OnStateEnter;
        private readonly ITimer asr_timeout;
        
        public State CurrentState { get; private set; } = State.in_call;
        
        public call_handler(CreateTimerDelegate createTimer)
        {
            this.asr_timeout = createTimer("asr_timeout", this.OnTimer);
        }
        
        public void Dispose()
        {
            if (!this.m_isDisposed)
            {
                this.asr_timeout.Dispose();
                this.m_isDisposed = true;
            }
        }
        
        public void Start()
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            this.OnLog?.Invoke("Start");
            this.CurrentState = State.in_call;
            this.OnStateEnter?.Invoke(State.in_call);
        }
        
        private void OnTimer(ITimer timer)
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            switch (this.CurrentState)
            {
            case State.awaiting_asr_fully_finalized:
                if (timer == this.asr_timeout)
                {
                    this.OnLog?.Invoke("OnTimer: asr_timeout");
                    SetState(State.asr_fully_finalized);
                }
                else 
                {
                    throw new Exception("Unexpected timer finish in state awaiting_asr_fully_finalized. Timer was " + timer);
                }
                break;
                
            default:
                throw new Exception("No timer events expected in state " + this.CurrentState);
            }
        }
        
        public void ProcessEvent__telephony_session_terminated()
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            this.OnLog?.Invoke("Event: telephony_session_terminated");
            switch (this.CurrentState)
            {
            case State.in_call:
                SetState(State.awaiting_asr_fully_finalized);
                break;
                
            case State.session_termination_process:
                SetState(State.awaiting_asr_fully_finalized);
                break;
                
            default:
                throw new Exception("Event telephony_session_terminated is not expected in state " + this.CurrentState);
            }
        }
        
        public void ProcessEvent__asr_fully_finalized()
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            this.OnLog?.Invoke("Event: asr_fully_finalized");
            switch (this.CurrentState)
            {
            case State.awaiting_asr_fully_finalized:
                SetState(State.asr_fully_finalized);
                break;
                
            case State.asr_fully_finalized:
                break;
                
            default:
                throw new Exception("Event asr_fully_finalized is not expected in state " + this.CurrentState);
            }
        }
        
        public void ProcessEvent__script_final_state_reached()
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            this.OnLog?.Invoke("Event: script_final_state_reached");
            switch (this.CurrentState)
            {
            case State.in_call:
                SetState(State.early_termination);
                break;
                
            case State.session_termination_process:
                SetState(State.early_termination);
                break;
                
            case State.awaiting_asr_fully_finalized:
                SetState(State.early_termination);
                break;
                
            case State.asr_fully_finalized:
                SetState(State.termination);
                break;
                
            default:
                throw new Exception("Event script_final_state_reached is not expected in state " + this.CurrentState);
            }
        }
        
        public void ProcessEvent__session_termination_request()
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            this.OnLog?.Invoke("Event: session_termination_request");
            switch (this.CurrentState)
            {
            case State.in_call:
                SetState(State.session_termination_process);
                break;
                
            case State.session_termination_process:
                break;
                
            case State.awaiting_asr_fully_finalized:
                break;
                
            case State.asr_fully_finalized:
                break;
                
            default:
                throw new Exception("Event session_termination_request is not expected in state " + this.CurrentState);
            }
        }
        
        private void SetState(State state)
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            this.OnLog?.Invoke("SetState: " + state);
            switch (state)
            {
            case State.in_call:
                this.CurrentState = State.in_call;
                this.OnStateEnter?.Invoke(State.in_call);
                break;
                
            case State.session_termination_process:
                this.CurrentState = State.session_termination_process;
                this.OnStateEnter?.Invoke(State.session_termination_process);
                OnStateEnter__session_termination_process?.Invoke();
                break;
                
            case State.awaiting_asr_fully_finalized:
                this.CurrentState = State.awaiting_asr_fully_finalized;
                this.OnStateEnter?.Invoke(State.awaiting_asr_fully_finalized);
                this.asr_timeout.StartOrReset(10);
                OnStateEnter__awaiting_asr_fully_finalized?.Invoke();
                break;
                
            case State.asr_fully_finalized:
                this.CurrentState = State.asr_fully_finalized;
                this.OnStateEnter?.Invoke(State.asr_fully_finalized);
                this.asr_timeout.Stop();
                OnStateEnter__asr_fully_finalized?.Invoke();
                break;
                
            case State.early_termination:
                this.CurrentState = State.early_termination;
                this.OnStateEnter?.Invoke(State.early_termination);
                OnStateEnter__early_termination?.Invoke();
                SetState(State.termination).ConfigureAwait(false);
                break;
                
            case State.termination:
                this.CurrentState = State.termination;
                this.OnStateEnter?.Invoke(State.termination);
                OnStateEnter__termination?.Invoke();
                break;
                
            default:
                throw new Exception("Unexpected state " + state);
            }
        }
        
    }
}
