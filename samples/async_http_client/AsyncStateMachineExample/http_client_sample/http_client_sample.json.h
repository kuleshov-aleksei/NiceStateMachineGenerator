// generated by NiceStateMachineGenerator v1.0.0.0

#pragma once

#include <stdexcept>
#include <functional>
#include <optional>


namespace generated
{
    
    template<class T>
    concept Timer = requires(T t) {
        { t.StartOrReset(double timerDelaySeconds) };
        { t.Stop() };
    };
    
    template<Timer T>
    using TimerFiredCallback = void(*)(const T* timer);
    
    template<Timer T>
    using TimerFactory = T*(*)(const char* timerName, TimerFiredCallback<T> callback);
    
    
    template <Timer T>
    class http_client_sample
    {
    public:
        enum class State
        {
            Start,
            Authorized,
            LoadCategories,
            CategoriesLoaded,
            LoadGoodsList,
            GoodsListLoaded,
            Crash,
        };
        
        /*Load categories from external API*/
        std::function<void()> OnStateEnter__LoadCategories;
        /*Load goods from external API*/
        std::function<void()> OnStateEnter__LoadGoodsList;
        
        
    private:
        State m_currentState = State::Start;
        
    public:
        http_client_sample(TimerFactory<T> timerFactory)
        {
        }
        
        ~http_client_sample()
        {
        }
        
        State GetCurrentState()
        {
            return m_currentState;
        }
        
        void Start()
        {
            m_currentState = State::Start;
        }
        
        void ProcessEvent__authorized(string username, ulong userId, string firstName, string secondName, string middleName)
        {
            switch (m_currentState)
            {
            case State::Start:
                SetState(State::Authorized);
                break;
                
            case State::Authorized:
                break;
                
            case State::LoadCategories:
                break;
                
            case State::CategoriesLoaded:
                break;
                
            case State::LoadGoodsList:
                break;
                
            case State::GoodsListLoaded:
                break;
                
            default:
                throw std::runtime_error("Event authorized is not expected in current state " /* + this.CurrentState*/);
            }
        }
        
        void ProcessEvent__request_failed(string errorMessage)
        {
            switch (m_currentState)
            {
            case State::Start:
                SetState(State::Crash);
                break;
                
            case State::Authorized:
                break;
                
            case State::LoadCategories:
                break;
                
            case State::CategoriesLoaded:
                break;
                
            case State::LoadGoodsList:
                break;
                
            case State::GoodsListLoaded:
                break;
                
            default:
                throw std::runtime_error("Event request_failed is not expected in current state " /* + this.CurrentState*/);
            }
        }
        
        void ProcessEvent__external_event_user_choose_category(ulong userId, string choosenCategory, DateTime analyticsSelectionLocalTime, string analyticsRegion, bool analyticsIsVPNEnabled)
        {
            switch (m_currentState)
            {
            case State::Start:
                break;
                
            case State::Authorized:
                break;
                
            case State::LoadCategories:
                break;
                
            case State::CategoriesLoaded:
                SetState(State::LoadGoodsList);
                break;
                
            case State::LoadGoodsList:
                break;
                
            case State::GoodsListLoaded:
                break;
                
            default:
                throw std::runtime_error("Event external_event_user_choose_category is not expected in current state " /* + this.CurrentState*/);
            }
        }
        
        void ProcessEvent__external_event_get_categories()
        {
            switch (m_currentState)
            {
            case State::Start:
                break;
                
            case State::Authorized:
                SetState(State::LoadCategories);
                break;
                
            case State::LoadCategories:
                break;
                
            case State::CategoriesLoaded:
                break;
                
            case State::LoadGoodsList:
                break;
                
            case State::GoodsListLoaded:
                break;
                
            default:
                throw std::runtime_error("Event external_event_get_categories is not expected in current state " /* + this.CurrentState*/);
            }
        }
        
        void ProcessEvent__request_completed()
        {
            switch (m_currentState)
            {
            case State::Start:
                break;
                
            case State::Authorized:
                break;
                
            case State::LoadCategories:
                SetState(State::CategoriesLoaded);
                break;
                
            case State::CategoriesLoaded:
                break;
                
            case State::LoadGoodsList:
                SetState(State::GoodsListLoaded);
                break;
                
            case State::GoodsListLoaded:
                break;
                
            default:
                throw std::runtime_error("Event request_completed is not expected in current state " /* + this.CurrentState*/);
            }
        }
        
        void ProcessEvent__unathorized()
        {
            switch (m_currentState)
            {
            case State::Start:
                SetState(State::Start);
                break;
                
            case State::Authorized:
                break;
                
            case State::LoadCategories:
                SetState(State::Start);
                break;
                
            case State::CategoriesLoaded:
                break;
                
            case State::LoadGoodsList:
                SetState(State::Start);
                break;
                
            case State::GoodsListLoaded:
                SetState(State::Start);
                break;
                
            default:
                throw std::runtime_error("Event unathorized is not expected in current state " /* + this.CurrentState*/);
            }
        }
        
    private:
        void OnTimer(T* timer)
        {
            switch (m_currentState)
            {
            default:
                throw std::runtime_error("No timer events expected in current state" /*+ this.CurrentState*/);
            }
        }
        
        void SetState(State state)
        {
            switch (state)
            {
            case State::Start:
                m_currentState = State::Start;
                break;
                
            case State::Authorized:
                m_currentState = State::Authorized;
                break;
                
            case State::LoadCategories:
                m_currentState = State::LoadCategories;
                if (OnStateEnter__LoadCategories) { OnStateEnter__LoadCategories(); }
                break;
                
            case State::CategoriesLoaded:
                m_currentState = State::CategoriesLoaded;
                break;
                
            case State::LoadGoodsList:
                m_currentState = State::LoadGoodsList;
                if (OnStateEnter__LoadGoodsList) { OnStateEnter__LoadGoodsList(); }
                break;
                
            case State::GoodsListLoaded:
                m_currentState = State::GoodsListLoaded;
                break;
                
            case State::Crash:
                m_currentState = State::Crash;
                break;
                
            default:
                throw std::runtime_error("Unexpected state " /* + state*/);
            }
        }
        
    };
}
