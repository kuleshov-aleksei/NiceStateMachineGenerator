// generated by NiceStateMachineGenerator v1.0.0.0

using System;

namespace GeneratedSMHttpSample
{
    public partial class HttpSampleStateMachine: IDisposable
    {
        
        public delegate void TimerFiredCallback(ITimer timer);
        
        public interface ITimer: IDisposable
        {
            void StartOrReset(double timerDelaySeconds);
            void Stop();
        }
        
        public delegate ITimer CreateTimerDelegate(string timerName, TimerFiredCallback callback);
        
        
        public enum State
        {
            Start,
            Authorized,
            LoadCategories,
            CategoriesLoaded,
            LoadGoodsList,
            GoodsListLoaded,
            Crash,
        }
        
        /**<summary>Load categories from external API</summary>*/
        public event Func<Task> OnStateEnter__LoadCategories;
        /**<summary>Load goods from external API</summary>*/
        public event Func<Task> OnStateEnter__LoadGoodsList;
        
        
        private bool m_isDisposed = false;
        public event Action<string> OnLog;
        public event Func<State, Task> OnStateEnter;
        
        public State CurrentState { get; private set; } = State.Start;
        
        public HttpSampleStateMachine(CreateTimerDelegate createTimer)
        {
        }
        
        public void Dispose()
        {
            if (!this.m_isDisposed)
            {
                this.m_isDisposed = true;
            }
        }
        
        public async Task Start()
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            this.OnLog?.Invoke("Start");
            this.CurrentState = State.Start;
            await InvokeAsync(this.OnStateEnter, State.Start);
        }
        
        private void OnTimer(ITimer timer)
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            switch (this.CurrentState)
            {
            default:
                throw new Exception("No timer events expected in state " + this.CurrentState);
            }
        }
        
        public async Task ProcessEvent__authorized(string username, ulong userId, string firstName, string secondName, string middleName)
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            this.OnLog?.Invoke("Event: authorized");
            switch (this.CurrentState)
            {
            case State.Start:
                await SetState(State.Authorized);
                break;
                
            case State.Authorized:
                break;
                
            case State.LoadCategories:
                break;
                
            case State.CategoriesLoaded:
                break;
                
            case State.LoadGoodsList:
                break;
                
            case State.GoodsListLoaded:
                break;
                
            default:
                throw new Exception("Event authorized is not expected in state " + this.CurrentState);
            }
        }
        
        public async Task ProcessEvent__request_failed(string errorMessage)
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            this.OnLog?.Invoke("Event: request_failed");
            switch (this.CurrentState)
            {
            case State.Start:
                await SetState(State.Crash);
                break;
                
            case State.Authorized:
                break;
                
            case State.LoadCategories:
                break;
                
            case State.CategoriesLoaded:
                break;
                
            case State.LoadGoodsList:
                break;
                
            case State.GoodsListLoaded:
                break;
                
            default:
                throw new Exception("Event request_failed is not expected in state " + this.CurrentState);
            }
        }
        
        public async Task ProcessEvent__external_event_user_choose_category(ulong userId, string choosenCategory, DateTime analyticsSelectionLocalTime, string analyticsRegion, bool analyticsIsVPNEnabled)
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            this.OnLog?.Invoke("Event: external_event_user_choose_category");
            switch (this.CurrentState)
            {
            case State.Start:
                break;
                
            case State.Authorized:
                break;
                
            case State.LoadCategories:
                break;
                
            case State.CategoriesLoaded:
                await SetState(State.LoadGoodsList);
                break;
                
            case State.LoadGoodsList:
                break;
                
            case State.GoodsListLoaded:
                break;
                
            default:
                throw new Exception("Event external_event_user_choose_category is not expected in state " + this.CurrentState);
            }
        }
        
        public async Task ProcessEvent__external_event_get_categories()
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            this.OnLog?.Invoke("Event: external_event_get_categories");
            switch (this.CurrentState)
            {
            case State.Start:
                break;
                
            case State.Authorized:
                await SetState(State.LoadCategories);
                break;
                
            case State.LoadCategories:
                break;
                
            case State.CategoriesLoaded:
                break;
                
            case State.LoadGoodsList:
                break;
                
            case State.GoodsListLoaded:
                break;
                
            default:
                throw new Exception("Event external_event_get_categories is not expected in state " + this.CurrentState);
            }
        }
        
        public async Task ProcessEvent__request_completed()
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            this.OnLog?.Invoke("Event: request_completed");
            switch (this.CurrentState)
            {
            case State.Start:
                break;
                
            case State.Authorized:
                break;
                
            case State.LoadCategories:
                await SetState(State.CategoriesLoaded);
                break;
                
            case State.CategoriesLoaded:
                break;
                
            case State.LoadGoodsList:
                await SetState(State.GoodsListLoaded);
                break;
                
            case State.GoodsListLoaded:
                break;
                
            default:
                throw new Exception("Event request_completed is not expected in state " + this.CurrentState);
            }
        }
        
        public async Task ProcessEvent__unathorized()
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            this.OnLog?.Invoke("Event: unathorized");
            switch (this.CurrentState)
            {
            case State.Start:
                await SetState(State.Start);
                break;
                
            case State.Authorized:
                break;
                
            case State.LoadCategories:
                await SetState(State.Start);
                break;
                
            case State.CategoriesLoaded:
                break;
                
            case State.LoadGoodsList:
                await SetState(State.Start);
                break;
                
            case State.GoodsListLoaded:
                await SetState(State.Start);
                break;
                
            default:
                throw new Exception("Event unathorized is not expected in state " + this.CurrentState);
            }
        }
        
        private async Task SetState(State state)
        {
            if (this.m_isDisposed)
            {
                return;
            }
            
            this.OnLog?.Invoke("SetState: " + state);
            switch (state)
            {
            case State.Start:
                this.CurrentState = State.Start;
                await InvokeAsync(this.OnStateEnter, State.Start);
                break;
                
            case State.Authorized:
                this.CurrentState = State.Authorized;
                await InvokeAsync(this.OnStateEnter, State.Authorized);
                break;
                
            case State.LoadCategories:
                this.CurrentState = State.LoadCategories;
                await InvokeAsync(this.OnStateEnter, State.LoadCategories);
                await InvokeAsync(OnStateEnter__LoadCategories);
                break;
                
            case State.CategoriesLoaded:
                this.CurrentState = State.CategoriesLoaded;
                await InvokeAsync(this.OnStateEnter, State.CategoriesLoaded);
                break;
                
            case State.LoadGoodsList:
                this.CurrentState = State.LoadGoodsList;
                await InvokeAsync(this.OnStateEnter, State.LoadGoodsList);
                await InvokeAsync(OnStateEnter__LoadGoodsList);
                break;
                
            case State.GoodsListLoaded:
                this.CurrentState = State.GoodsListLoaded;
                await InvokeAsync(this.OnStateEnter, State.GoodsListLoaded);
                break;
                
            case State.Crash:
                this.CurrentState = State.Crash;
                await InvokeAsync(this.OnStateEnter, State.Crash);
                break;
                
            default:
                throw new Exception("Unexpected state " + state);
            }
        }
        
        private async Task InvokeAsync(Func<Task> callback)
        {
            if (callback == null)
            {
                return;
            }
            
            Delegate[] invocationList = callback.GetInvocationList();
            if (invocationList != null && invocationList.Length > 0)
            {
                foreach (Delegate invocation in invocationList)
                {
                    try
                    {
                        await ((Func<Task>)invocation).Invoke();
                    }
                    catch (Exception ex)
                    {
                        throw new Exception($"Error processing callback handler: {ex.Message}", ex);
                    }
                }
            }
        }
        
        private async Task InvokeAsync<T>(Func<T, Task> callback, T argument0)
        {
            if (callback == null)
            {
                return;
            }
            
            Delegate[] invocationList = callback.GetInvocationList();
            if (invocationList != null && invocationList.Length > 0)
            {
                foreach (Delegate invocation in invocationList)
                {
                    try
                    {
                        await ((Func<T, Task>)invocation).Invoke(argument0);
                    }
                    catch (Exception ex)
                    {
                        throw new Exception($"Error processing callback handler: {ex.Message}", ex);
                    }
                }
            }
        }
        
        private async Task InvokeAsync<T0, T1, T2, T3, T4>(Func<T0, T1, T2, T3, T4, Task> callback, T0 argument0, T1 argument1, T2 argument2, T3 argument3, T4 argument4)
        {
            if (callback == null)
            {
                return;
            }
            
            Delegate[] invocationList = callback.GetInvocationList();
            if (invocationList != null && invocationList.Length > 0)
            {
                foreach (Delegate invocation in invocationList)
                {
                    try
                    {
                        await ((Func<T0, T1, T2, T3, T4, Task>)invocation).Invoke(argument0, argument1, argument2, argument3, argument4);
                    }
                    catch (Exception ex)
                    {
                        throw new Exception($"Error processing callback handler: {ex.Message}", ex);
                    }
                }
            }
        }
        
    }
}
