using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace NiceStateMachineGenerator
{
    public sealed class CsharpCodeExporter
    {
        public sealed class Settings
        {
            public string NamespaceName { get; set; } = "Generated";
            public string? ClassName { get; set; } = null; //generate from file name
            public List<string>? AdditionalUsings { get; set; }

            public string? CommonCodeNamespace { get; set; } = null; //same as NamespaceName
            public bool NullableReferenceTypes { get; set; } = false;

            internal string NullableQuantifier => this.NullableReferenceTypes ? "?" : "";
        }

        public static void Export(StateMachineDescr stateMachine, string stateMachineFileName, string? commonCodeFileName, Settings settings)
        {
            if (String.IsNullOrEmpty(settings.ClassName))
            {
                settings.ClassName = ExportHelper.GetClassNameFromFileName(stateMachineFileName);
            };
            if (commonCodeFileName != null && commonCodeFileName != stateMachineFileName)
            {
                using (StreamWriter stateMachineWriter = new StreamWriter(stateMachineFileName))
                using (StreamWriter commonCodeWriter = new StreamWriter(commonCodeFileName))
                {
                    Export(stateMachine, stateMachineWriter, commonCodeWriter, settings);
                }
            }
            else
            {
                using (StreamWriter stateMachineWriter = new StreamWriter(stateMachineFileName))
                {
                    Export(stateMachine, stateMachineWriter, null, settings);
                }
            }

        }

        public static void Export(StateMachineDescr stateMachine, TextWriter stateMachineWriter, TextWriter? commonCodeWriter, Settings settings)
        {
            if (commonCodeWriter != null)
            {
                using (IndentedTextWriter stateMachineIndentedWriter = new IndentedTextWriter(stateMachineWriter))
                using (IndentedTextWriter commonCodeIndentedWriter = new IndentedTextWriter(commonCodeWriter))
                {
                    Export(stateMachine, stateMachineIndentedWriter, commonCodeIndentedWriter, settings);
                }
            }
            else
            {
                using (IndentedTextWriter stateMachineIndentedWriter = new IndentedTextWriter(stateMachineWriter))
                {
                    Export(stateMachine, stateMachineIndentedWriter, null, settings);
                }
            }
        }

        public static void Export(StateMachineDescr stateMachine, IndentedTextWriter stateMachineWriter, IndentedTextWriter? commonCodeWriter, Settings settings)
        {
            CsharpCodeExporter exporter = new CsharpCodeExporter(stateMachine, stateMachineWriter, commonCodeWriter, settings);
            exporter.ExportInternal();
        }

        private readonly StateMachineDescr m_stateMachine;
        private readonly IndentedTextWriter m_mainCodeWriter;
        private readonly IndentedTextWriter? m_commonCodeWriter;
        private readonly Settings m_settings;
        private readonly HashSet<string> m_modifiedTimers;
        private readonly string m_generatedBy;

        private CsharpCodeExporter(StateMachineDescr stateMachine, IndentedTextWriter mainCodeWriter, IndentedTextWriter? commonCodeWriter, Settings settings)
        {
            this.m_stateMachine = stateMachine;
            this.m_mainCodeWriter = mainCodeWriter;
            this.m_commonCodeWriter = commonCodeWriter;
            this.m_settings = settings;


            this.m_modifiedTimers = this.m_stateMachine.States.Values
                .SelectMany(s => s.StartTimers.Values)
                .Where(t => t.Modify != null)
                .Select(t => t.TimerName)
                .ToHashSet();

            this.m_generatedBy = $"// generated by {nameof(NiceStateMachineGenerator)} v{Assembly.GetExecutingAssembly().GetName().Version}";
        }

        private void ExportInternal()
        {
            if (this.m_commonCodeWriter != null)
            {
                this.m_commonCodeWriter.WriteLine(this.m_generatedBy);
                WriteVerbatimCode(HEADER_CODE, this.m_commonCodeWriter);
                this.m_commonCodeWriter.WriteLine();
                this.m_commonCodeWriter.WriteLine($"namespace {this.m_settings.CommonCodeNamespace ?? this.m_settings.NamespaceName}");
                this.m_commonCodeWriter.WriteLine("{");
                {
                    ++this.m_commonCodeWriter.Indent;
                    WriteVerbatimCode(TIMER_CODE, this.m_commonCodeWriter);
                    --this.m_commonCodeWriter.Indent;
                }
                this.m_commonCodeWriter.WriteLine("}");
            };

            
            this.m_mainCodeWriter.WriteLine(this.m_generatedBy);

            WriteVerbatimCode(HEADER_CODE);
            if (this.m_settings.AdditionalUsings != null)
            {
                foreach (string ns in this.m_settings.AdditionalUsings)
                {
                    this.m_mainCodeWriter.WriteLine($"using {ns};");
                };
                this.m_mainCodeWriter.WriteLine();
            };

            this.m_mainCodeWriter.WriteLine($"namespace {this.m_settings.NamespaceName}");
            this.m_mainCodeWriter.WriteLine("{");
            {
                ++this.m_mainCodeWriter.Indent;
                this.m_mainCodeWriter.WriteLine($"public partial class {this.m_settings.ClassName}: IDisposable");
                this.m_mainCodeWriter.WriteLine("{");
                {
                    ++this.m_mainCodeWriter.Indent;
                    if (this.m_commonCodeWriter == null)
                    {
                        WriteVerbatimCode(TIMER_CODE);
                    };
                    WriteEnum(STATES_ENUM_NAME, this.m_stateMachine.States.Keys);
                    WriteCallbackEvents();
                    WriteFieldsAndConstructorDestructor();
                    WriteStart();
                    WriteOnTimer();
                    foreach (EventDescr @event in this.m_stateMachine.Events.Values)
                    {
                        WriteProcessEvent(@event);
                    };
                    WriteSetState();
                    --this.m_mainCodeWriter.Indent;
                }
                this.m_mainCodeWriter.WriteLine("}");  //class
                --this.m_mainCodeWriter.Indent;
            };
            this.m_mainCodeWriter.WriteLine("}"); //namespace
        }

        private void WriteSetState()
        {
            this.m_mainCodeWriter.WriteLine($"private void SetState({STATES_ENUM_NAME} state)");
            this.m_mainCodeWriter.WriteLine("{");
            {
                ++this.m_mainCodeWriter.Indent;
                this.WriteExitIfDisposed();
                this.m_mainCodeWriter.WriteLine($"this.OnLog?.Invoke(\"SetState: \" + state);");
                this.m_mainCodeWriter.WriteLine("switch (state)");
                this.m_mainCodeWriter.WriteLine("{");
                {
                    foreach (StateDescr state in this.m_stateMachine.States.Values)
                    {
                        this.m_mainCodeWriter.WriteLine($"case {STATES_ENUM_NAME}.{state.Name}:");
                        ++this.m_mainCodeWriter.Indent;
                        {
                            WriteStateEnterCode(state);
                            if (state.NextStateName != null)
                            {
                                this.m_mainCodeWriter.WriteLine($"SetState({STATES_ENUM_NAME}.{state.NextStateName});");
                            }
                            this.m_mainCodeWriter.WriteLine("break;");
                        }
                        this.m_mainCodeWriter.WriteLine();
                        --this.m_mainCodeWriter.Indent;
                    };

                    this.m_mainCodeWriter.WriteLine($"default:");
                    ++this.m_mainCodeWriter.Indent;
                    {
                        this.m_mainCodeWriter.WriteLine("throw new Exception(\"Unexpected state \" + state);");
                    }
                    --this.m_mainCodeWriter.Indent;
                }
                this.m_mainCodeWriter.WriteLine("}");
                --this.m_mainCodeWriter.Indent;
            }
            this.m_mainCodeWriter.WriteLine("}");
            this.m_mainCodeWriter.WriteLine();
        }

        private void WriteExitIfDisposed()
        {
            this.m_mainCodeWriter.WriteLine("if (this.m_isDisposed)");
            this.m_mainCodeWriter.WriteLine("{");
            ++this.m_mainCodeWriter.Indent;
            {
                this.m_mainCodeWriter.WriteLine("return;");
            }
            --this.m_mainCodeWriter.Indent;
            this.m_mainCodeWriter.WriteLine("}");
            this.m_mainCodeWriter.WriteLine();
        }

        private void WriteProcessEvent(EventDescr @event)
        {
            this.m_mainCodeWriter.Write($"public void ProcessEvent__{@event.Name}(");
            for (int i = 0; i < @event.Args.Count; ++i)
            {
                KeyValuePair<string, string> arg = @event.Args[i];
                if (i != 0)
                {
                    this.m_mainCodeWriter.Write(", ");
                }
                this.m_mainCodeWriter.Write($"{arg.Value} {arg.Key}");
            }
            this.m_mainCodeWriter.WriteLine(")");
            this.m_mainCodeWriter.WriteLine("{");
            {
                ++this.m_mainCodeWriter.Indent;
                this.WriteExitIfDisposed();
                this.m_mainCodeWriter.WriteLine($"this.OnLog?.Invoke(\"Event: {@event.Name}\");");
                this.m_mainCodeWriter.WriteLine("switch (this.CurrentState)");
                this.m_mainCodeWriter.WriteLine("{");
                {
                    foreach (StateDescr state in this.m_stateMachine.States.Values)
                    {
                        if (state.EventEdges != null && state.EventEdges.TryGetValue(@event.Name, out EdgeDescr? edge))
                        {
                            this.m_mainCodeWriter.WriteLine($"case {STATES_ENUM_NAME}.{state.Name}:");
                            ++this.m_mainCodeWriter.Indent;
                            {
                                WriteEdgeTraverse(state, edge, out bool throwsException);
                                if (!throwsException)
                                {
                                    this.m_mainCodeWriter.WriteLine("break;");
                                }
                            }
                            this.m_mainCodeWriter.WriteLine();
                            --this.m_mainCodeWriter.Indent;
                        }
                    };

                    this.m_mainCodeWriter.WriteLine($"default:");
                    ++this.m_mainCodeWriter.Indent;
                    {
                        this.m_mainCodeWriter.WriteLine($"throw new Exception(\"Event {@event.Name} is not expected in state \" + this.CurrentState);");
                    }
                    --this.m_mainCodeWriter.Indent;
                }
                this.m_mainCodeWriter.WriteLine("}");
                --this.m_mainCodeWriter.Indent;
            }
            this.m_mainCodeWriter.WriteLine("}");
            this.m_mainCodeWriter.WriteLine();
        }

        private void WriteOnTimer()
        {
            this.m_mainCodeWriter.WriteLine($"private void OnTimer(ITimer timer)");
            this.m_mainCodeWriter.WriteLine("{");
            {
                ++this.m_mainCodeWriter.Indent;
                this.WriteExitIfDisposed();
                this.m_mainCodeWriter.WriteLine("switch (this.CurrentState)");
                this.m_mainCodeWriter.WriteLine("{");
                {
                    foreach (StateDescr state in this.m_stateMachine.States.Values)
                    {
                        if (state.TimerEdges != null)
                        {
                            this.m_mainCodeWriter.WriteLine($"case {STATES_ENUM_NAME}.{state.Name}:");
                            ++this.m_mainCodeWriter.Indent;
                            {
                                if (state.TimerEdges.Values.Count > 0)
                                {
                                    foreach (EdgeDescr edge in state.TimerEdges.Values)
                                    {
                                        this.m_mainCodeWriter.WriteLine($"if (timer == this.{edge.InvokerName})");
                                        this.m_mainCodeWriter.WriteLine("{");
                                        {
                                            ++this.m_mainCodeWriter.Indent;
                                            this.m_mainCodeWriter.WriteLine($"this.OnLog?.Invoke(\"OnTimer: {edge.InvokerName}\");");
                                            WriteEdgeTraverse(state, edge, out _);
                                            --this.m_mainCodeWriter.Indent;
                                        }
                                        this.m_mainCodeWriter.WriteLine("}");
                                        this.m_mainCodeWriter.WriteLine("else ");
                                    }
                                    this.m_mainCodeWriter.WriteLine("{");
                                    {
                                        ++this.m_mainCodeWriter.Indent;
                                        this.m_mainCodeWriter.WriteLine($"throw new Exception(\"Unexpected timer finish in state {state.Name}. Timer was \" + timer);");
                                        --this.m_mainCodeWriter.Indent;
                                    }
                                    this.m_mainCodeWriter.WriteLine("}");
                                    this.m_mainCodeWriter.WriteLine("break;");
                                }
                                else
                                {
                                    this.m_mainCodeWriter.WriteLine($"throw new Exception(\"Unexpected timer finish in state {state.Name}. Timer was \" + timer);");
                                };
                            }
                            this.m_mainCodeWriter.WriteLine();
                            --this.m_mainCodeWriter.Indent;
                        }
                    };

                    this.m_mainCodeWriter.WriteLine($"default:");
                    ++this.m_mainCodeWriter.Indent;
                    {
                        this.m_mainCodeWriter.WriteLine("throw new Exception(\"No timer events expected in state \" + this.CurrentState);");
                    }
                    --this.m_mainCodeWriter.Indent;
                }
                this.m_mainCodeWriter.WriteLine("}");
                --this.m_mainCodeWriter.Indent;
            }
            this.m_mainCodeWriter.WriteLine("}");
            this.m_mainCodeWriter.WriteLine();
        }

        private void WriteEdgeTraverse(StateDescr state, EdgeDescr edge, out bool throwsException)
        {
            foreach (EdgeTraverseCallbackType callbackType in edge.OnTraverseEventTypes)
            {
                string callbackName = ExportHelper.ComposeEdgeTraveseCallbackName(callbackType, state, edge, out bool needArgs, out bool isFunction);

                if (!isFunction)
                {
                    //regular callback code
                    this.m_mainCodeWriter.Write($"{callbackName}?.Invoke(");
                    WriteEdgeTraverseCallbackArgs(needArgs, edge);
                    this.m_mainCodeWriter.WriteLine(");");
                }
                else
                {
                    //functions are for choosing next state based on result
                    if (edge.Targets == null)
                    {
                        throw new Exception("Should not happen! Check parser!");
                    };

                    this.m_mainCodeWriter.WriteLine("{"); //visibility guard
                    ++this.m_mainCodeWriter.Indent;
                    {
                        this.m_mainCodeWriter.Write($"{STATES_ENUM_NAME}? nextState = {callbackName}.Invoke(");
                        WriteEdgeTraverseCallbackArgs(needArgs, edge);
                        this.m_mainCodeWriter.WriteLine(");");

                        this.m_mainCodeWriter.WriteLine($"this.OnLog?.Invoke(\"OnTraverse result: {edge.InvokerName} -> \" + (nextState?.ToString() ?? \"null\"));");

                        this.m_mainCodeWriter.WriteLine($"if (nextState != null)");
                        this.m_mainCodeWriter.WriteLine("{");
                        ++this.m_mainCodeWriter.Indent;
                        {
                            this.m_mainCodeWriter.WriteLine($"switch (nextState.Value)");
                            this.m_mainCodeWriter.WriteLine("{");
                            {
                                foreach (KeyValuePair<string, EdgeTarget> subEdge in edge.Targets)
                                {
                                    if (subEdge.Value.TargetType == EdgeTargetType.state)
                                    {
                                        this.m_mainCodeWriter.WriteLine($"case {STATES_ENUM_NAME}.{subEdge.Value.StateName}:");
                                        ++this.m_mainCodeWriter.Indent;
                                        this.m_mainCodeWriter.WriteLine($"/*{subEdge.Key}*/");
                                        this.m_mainCodeWriter.WriteLine($"SetState({STATES_ENUM_NAME}.{subEdge.Value.StateName});");
                                        this.m_mainCodeWriter.WriteLine($"break;");
                                        --this.m_mainCodeWriter.Indent;
                                    }
                                };
                                this.m_mainCodeWriter.WriteLine($"default:");
                                ++this.m_mainCodeWriter.Indent;
                                this.m_mainCodeWriter.WriteLine("throw new Exception(\"Unexpected target state \" + nextState.Value + \" was chosen by callback function " + callbackName + "\");");
                                --this.m_mainCodeWriter.Indent;
                            }
                            this.m_mainCodeWriter.WriteLine("}"); //switch
                        }
                        --this.m_mainCodeWriter.Indent;
                        this.m_mainCodeWriter.WriteLine("}"); //if has value

                    }
                    --this.m_mainCodeWriter.Indent;
                    this.m_mainCodeWriter.WriteLine("}"); //visibility guard
                }
            };

            throwsException = false;
            //only happens in case of no function
            if (edge.Target != null)
            {
                switch (edge.Target.TargetType)
                {
                case EdgeTargetType.state:
                    this.m_mainCodeWriter.WriteLine($"SetState({STATES_ENUM_NAME}.{edge.Target.StateName});");
                    break;
                case EdgeTargetType.failure:
                    this.m_mainCodeWriter.WriteLine($"throw new Exception(\"Event {edge.InvokerName} is forbidden in state \" + this.CurrentState);");
                    throwsException = true;
                    break;
                case EdgeTargetType.no_change:
                    //notnhing to do
                    break;
                default:
                    throw new Exception("Unexpected type " + edge.Target.TargetType);
                }
            }
        }

        private void WriteEdgeTraverseCallbackArgs(bool needArgs, EdgeDescr edge)
        {
            if (needArgs)
            {
                EventDescr @event = this.m_stateMachine.Events[edge.InvokerName];
                for (int i = 0; i < @event.Args.Count; ++i)
                {
                    KeyValuePair<string, string> arg = @event.Args[i];
                    if (i != 0)
                    {
                        this.m_mainCodeWriter.Write(", ");
                    }
                    this.m_mainCodeWriter.Write(arg.Key);
                }
            }
        }

        private void WriteStart()
        {
            this.m_mainCodeWriter.WriteLine($"public void Start()");
            this.m_mainCodeWriter.WriteLine("{");
            {
                ++this.m_mainCodeWriter.Indent;
                this.WriteExitIfDisposed();
                this.m_mainCodeWriter.WriteLine($"this.OnLog?.Invoke(\"Start\");");
                WriteStateEnterCode(this.m_stateMachine.States[this.m_stateMachine.StartState]);
                --this.m_mainCodeWriter.Indent;
            }
            this.m_mainCodeWriter.WriteLine("}");
            this.m_mainCodeWriter.WriteLine();
        }

        private void WriteStateEnterCode(StateDescr state)
        {
            this.m_mainCodeWriter.WriteLine($"this.CurrentState = {STATES_ENUM_NAME}.{state.Name};");
            this.m_mainCodeWriter.WriteLine($"this.OnStateEnter?.Invoke({STATES_ENUM_NAME}.{state.Name});");

            foreach (string timer in state.StopTimers)
            {
                this.m_mainCodeWriter.WriteLine($"this.{timer}.Stop();");
            }
            foreach (TimerStartDescr timerStart in state.StartTimers.Values)
            {
                if (this.m_modifiedTimers.Contains(timerStart.TimerName))
                {
                    string delayVariable = ComposeTimerDelayVariable(timerStart.TimerName);
                    if (timerStart.Modify != null)
                    {
                        if (timerStart.Modify.set != null)
                        {
                            this.m_mainCodeWriter.WriteLine($"this.{delayVariable} = {timerStart.Modify.set.Value.ToString(CultureInfo.InvariantCulture)};");
                        }
                        else
                        {
                            if (timerStart.Modify.multiplier != null)
                            {
                                this.m_mainCodeWriter.WriteLine($"this.{delayVariable} *= {timerStart.Modify.multiplier.Value.ToString(CultureInfo.InvariantCulture)};");
                            };
                            if (timerStart.Modify.increment != null)
                            {
                                this.m_mainCodeWriter.WriteLine($"this.{delayVariable} += {timerStart.Modify.increment.Value.ToString(CultureInfo.InvariantCulture)};");
                            };
                            if (timerStart.Modify.min != null)
                            {
                                this.m_mainCodeWriter.WriteLine($"if (this.{delayVariable} < {timerStart.Modify.min.Value.ToString(CultureInfo.InvariantCulture)}) {{ this.{delayVariable} = {timerStart.Modify.min.Value.ToString(CultureInfo.InvariantCulture)}; }}");
                            };
                            if (timerStart.Modify.max != null)
                            {
                                this.m_mainCodeWriter.WriteLine($"if (this.{delayVariable} > {timerStart.Modify.max.Value.ToString(CultureInfo.InvariantCulture)}) {{ this.{delayVariable} = {timerStart.Modify.max.Value.ToString(CultureInfo.InvariantCulture)}; }}");
                            };
                        };
                    };
                    this.m_mainCodeWriter.WriteLine($"this.{timerStart.TimerName}.StartOrReset({delayVariable});");
                }
                else
                {
                    TimerDescr descr = this.m_stateMachine.Timers[timerStart.TimerName];
                    this.m_mainCodeWriter.WriteLine($"this.{timerStart.TimerName}.StartOrReset({descr.IntervalSeconds.ToString(CultureInfo.InvariantCulture)});");
                }
            }

            if (state.NeedOnEnterEvent)
            {
                string callbackName = ComposeStateEnterCallback(state);
                if (state.OnEnterEventAlluxTargets == null)
                {
                    //regular plain callback
                    this.m_mainCodeWriter.WriteLine($"{callbackName}?.Invoke();");
                }
                else
                {

                    this.m_mainCodeWriter.WriteLine("{"); //visibility guard
                    ++this.m_mainCodeWriter.Indent;
                    {
                        this.m_mainCodeWriter.WriteLine($"{STATES_ENUM_NAME}? nextState = {callbackName}.Invoke();");
                        this.m_mainCodeWriter.WriteLine($"this.OnLog?.Invoke(\"OnEnter result: \" + (nextState?.ToString() ?? \"null\"));");

                        this.m_mainCodeWriter.WriteLine($"if (nextState != null)");
                        this.m_mainCodeWriter.WriteLine("{");
                        ++this.m_mainCodeWriter.Indent;
                        {
                            this.m_mainCodeWriter.WriteLine($"switch (nextState.Value)");
                            this.m_mainCodeWriter.WriteLine("{");
                            {
                                foreach (KeyValuePair<string, EdgeTarget> subEdge in state.OnEnterEventAlluxTargets)
                                {
                                    if (subEdge.Value.TargetType == EdgeTargetType.state)
                                    {
                                        this.m_mainCodeWriter.WriteLine($"case {STATES_ENUM_NAME}.{subEdge.Value.StateName}:");
                                        ++this.m_mainCodeWriter.Indent;
                                        this.m_mainCodeWriter.WriteLine($"/*{subEdge.Key}*/");
                                        this.m_mainCodeWriter.WriteLine($"SetState({STATES_ENUM_NAME}.{subEdge.Value.StateName});");
                                        this.m_mainCodeWriter.WriteLine($"break;");
                                        --this.m_mainCodeWriter.Indent;
                                    }
                                };
                                this.m_mainCodeWriter.WriteLine($"default:");
                                ++this.m_mainCodeWriter.Indent;
                                this.m_mainCodeWriter.WriteLine("throw new Exception(\"Unexpected target state \" + nextState.Value + \" was chosen by callback function " + callbackName + "\");");
                                --this.m_mainCodeWriter.Indent;
                            }
                            this.m_mainCodeWriter.WriteLine("}"); //switch
                        }
                        --this.m_mainCodeWriter.Indent;
                        this.m_mainCodeWriter.WriteLine("}"); //if has value

                    }
                    --this.m_mainCodeWriter.Indent;
                    this.m_mainCodeWriter.WriteLine("}"); //visibility guard
                }
            }
        }

        private string ComposeTimerDelayVariable(string timerName)
        {
            return $"m_{timerName}_delay";
        }

        private void WriteFieldsAndConstructorDestructor()
        {
            this.m_mainCodeWriter.WriteLine($"private bool m_isDisposed = false;");
            this.m_mainCodeWriter.WriteLine($"public event Action<string> OnLog;");
            this.m_mainCodeWriter.WriteLine($"public event Action<{STATES_ENUM_NAME}> OnStateEnter;");

            foreach (string timer in this.m_stateMachine.Timers.Keys)
            {
                this.m_mainCodeWriter.WriteLine($"private readonly ITimer {timer};");
            }
            foreach (string timer in this.m_modifiedTimers)
            {
                TimerDescr descr = this.m_stateMachine.Timers[timer];
                this.m_mainCodeWriter.WriteLine($"private double {ComposeTimerDelayVariable(timer)} = {descr.IntervalSeconds.ToString(CultureInfo.InvariantCulture)};");
            }

            this.m_mainCodeWriter.WriteLine();
            this.m_mainCodeWriter.WriteLine($"public {STATES_ENUM_NAME} CurrentState {{ get; private set; }} = {STATES_ENUM_NAME}.{this.m_stateMachine.StartState};");
            this.m_mainCodeWriter.WriteLine();
            this.m_mainCodeWriter.WriteLine($"public {this.m_settings.ClassName}(CreateTimerDelegate createTimer)");
            this.m_mainCodeWriter.WriteLine("{");
            {
                ++this.m_mainCodeWriter.Indent;
                foreach (string timer in this.m_stateMachine.Timers.Keys)
                {
                    this.m_mainCodeWriter.WriteLine($"this.{timer} = createTimer(\"{timer}\", this.OnTimer);");
                }
                --this.m_mainCodeWriter.Indent;
            }
            this.m_mainCodeWriter.WriteLine("}");
            this.m_mainCodeWriter.WriteLine();

            this.m_mainCodeWriter.WriteLine($"public void Dispose()");
            this.m_mainCodeWriter.WriteLine("{");
            {
                ++this.m_mainCodeWriter.Indent;
                this.m_mainCodeWriter.WriteLine("if (!this.m_isDisposed)");
                this.m_mainCodeWriter.WriteLine("{");
                {
                    ++this.m_mainCodeWriter.Indent;
                    foreach (string timer in this.m_stateMachine.Timers.Keys)
                    {
                        this.m_mainCodeWriter.WriteLine($"this.{timer}.Dispose();");
                    }
                    this.m_mainCodeWriter.WriteLine($"this.m_isDisposed = true;");
                    --this.m_mainCodeWriter.Indent;
                }
                this.m_mainCodeWriter.WriteLine("}");
                --this.m_mainCodeWriter.Indent;
            }
            this.m_mainCodeWriter.WriteLine("}");
            this.m_mainCodeWriter.WriteLine();
        }

        private void WriteEnum(string enumName, IEnumerable<string> values)
        {
            this.m_mainCodeWriter.WriteLine($"public enum {enumName}");
            this.m_mainCodeWriter.WriteLine("{");
            {
                ++this.m_mainCodeWriter.Indent;
                foreach (string @event in values)
                {
                    this.m_mainCodeWriter.Write(@event);
                    this.m_mainCodeWriter.WriteLine(",");
                };
                --this.m_mainCodeWriter.Indent;
            }
            this.m_mainCodeWriter.WriteLine("}");
            this.m_mainCodeWriter.WriteLine("");
        }

        private static string ComposeStateEnterCallback(StateDescr state)
        {
            return $"OnStateEnter__{state.Name}";
        }

        private void WriteCommentIfSpecified(string? comment)
        {
            if (comment != null)
            {
                this.m_mainCodeWriter.Write("/**<summary>");
                this.m_mainCodeWriter.Write(comment); //could be an injection )
                this.m_mainCodeWriter.WriteLine("</summary>*/");
            }
        }

        private void WriteCallbackEvents()
        {
            foreach (StateDescr state in this.m_stateMachine.States.Values)
            {
                if (state.NeedOnEnterEvent)
                {
                    string callbackName = ComposeStateEnterCallback(state);
                    WriteCommentIfSpecified(state.OnEnterEventComment);
                    if (state.OnEnterEventAlluxTargets == null)
                    {
                        this.m_mainCodeWriter.WriteLine($"public event Action {callbackName};");
                    }
                    else
                    {
                        this.m_mainCodeWriter.WriteLine($"public event Func<{STATES_ENUM_NAME}?> {callbackName};");
                    }
                }
            }
            this.m_mainCodeWriter.WriteLine();

            Dictionary<string, bool> declaredEventCallbacks = new Dictionary<string, bool>();    //callback name -> is function callback
            foreach (StateDescr state in this.m_stateMachine.States.Values)
            {
                if (state.EventEdges != null)
                {
                    foreach (EdgeDescr edge in state.EventEdges.Values)
                    {
                        foreach (EdgeTraverseCallbackType callbackType in edge.OnTraverseEventTypes)
                        {
                            EventDescr @event = this.m_stateMachine.Events[edge.InvokerName];
                            WriteCallbackEvent(state, edge, @event.Args, callbackType, declaredEventCallbacks);
                        }
                    }
                }
                if (state.TimerEdges != null)
                {
                    foreach (EdgeDescr edge in state.TimerEdges.Values)
                    {
                        foreach (EdgeTraverseCallbackType callbackType in edge.OnTraverseEventTypes)
                        {
                            WriteCallbackEvent(state, edge, null, callbackType, declaredEventCallbacks);
                        }
                    }
                }
            }
            this.m_mainCodeWriter.WriteLine();
        }

        private void WriteCallbackEvent(StateDescr state, EdgeDescr edge, List<KeyValuePair<string, string>>? eventArgs, EdgeTraverseCallbackType callbackType, Dictionary<string, bool> declaredEventCallbacks)
        {
            string callbackName = ExportHelper.ComposeEdgeTraveseCallbackName(callbackType, state, edge, out bool needArgs, out bool isFunction);
            if (declaredEventCallbacks.TryGetValue(callbackName, out bool oldCallbackIsFunction))
            {
                if (oldCallbackIsFunction != isFunction)
                {
                    throw new Exception("should not happen! check validator!");
                }
                return;
            }
            else
            {
                declaredEventCallbacks.Add(callbackName, isFunction);
            };
            WriteCommentIfSpecified(edge.TraverseEventComment);

            needArgs = needArgs
                && eventArgs != null
                && eventArgs.Count > 0;

            bool isGeneric = needArgs || isFunction;

            this.m_mainCodeWriter.Write($"public event ");
            this.m_mainCodeWriter.Write(isFunction ? "Func" : "Action");
            if (isGeneric)
            {
                this.m_mainCodeWriter.Write("<");
            };
            if (needArgs)
            {
                for (int i = 0; i < eventArgs!.Count; ++i)
                {
                    KeyValuePair<string, string> arg = eventArgs[i];
                    if (i != 0)
                    {
                        this.m_mainCodeWriter.Write(", ");
                    };
                    this.m_mainCodeWriter.Write(arg.Value);
                };
            };
            if (isFunction)
            {
                if (needArgs)
                {
                    this.m_mainCodeWriter.Write(", ");
                };
                this.m_mainCodeWriter.Write($"{STATES_ENUM_NAME}?");
            };
            if (isGeneric)
            {
                this.m_mainCodeWriter.Write(">");
            }
            this.m_mainCodeWriter.WriteLine($" {callbackName}; ");
        }

        private static Regex s_splitRegex = new Regex(@"\r?\n", RegexOptions.Compiled);
        private void WriteVerbatimCode(string code, IndentedTextWriter? writer = null)
        {
            if (writer == null)
            {
                writer = this.m_mainCodeWriter;
            };

            foreach (string line in s_splitRegex.Split(code))
            {
                writer.WriteLine(line);
            }
        }

        private const string STATES_ENUM_NAME = "State";

        private const string HEADER_CODE =
@"
using System;
";

        private const string TIMER_CODE =
@"
public delegate void TimerFiredCallback(ITimer timer);

public interface ITimer: IDisposable
{
    void StartOrReset(double timerDelaySeconds);
    void Stop();
}

public delegate ITimer CreateTimerDelegate(string timerName, TimerFiredCallback callback);

";

    }
}

